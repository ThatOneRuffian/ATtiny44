
RGB_LED_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b3  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065a  00000000  00000000  00000cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f5  00000000  00000000  00001359  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  00001850  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000541  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000417  00000000  00000000  00001f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	ba c0       	rjmp	.+372    	; 0x182 <__vector_6>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__vector_7>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	29 c0       	rjmp	.+82     	; 0x6e <__vector_13>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e4 ef       	ldi	r30, 0xF4	; 244
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a0 36       	cpi	r26, 0x60	; 96
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a0 e6       	ldi	r26, 0x60	; 96
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a0 36       	cpi	r26, 0x60	; 96
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	69 d0       	rcall	.+210    	; 0x128 <main>
  56:	cc c0       	rjmp	.+408    	; 0x1f0 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <__vector_7>:
	//PORTB &= ~(1<<PORTB2);  //clear LED PWM pin
	clearTimer1();
}

void clearTimer1(){
	TCNT1 = 0x00; //reset timer1 counter to zero
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	0f 90       	pop	r0
  66:	0f be       	out	0x3f, r0	; 63
  68:	0f 90       	pop	r0
  6a:	1f 90       	pop	r1
  6c:	18 95       	reti

0000006e <__vector_13>:
  6e:	1f 92       	push	r1
  70:	0f 92       	push	r0
  72:	0f b6       	in	r0, 0x3f	; 63
  74:	0f 92       	push	r0
  76:	11 24       	eor	r1, r1
  78:	2f 93       	push	r18
  7a:	3f 93       	push	r19
  7c:	8f 93       	push	r24
  7e:	9f 93       	push	r25
  80:	85 b1       	in	r24, 0x05	; 5
  82:	2c b5       	in	r18, 0x2c	; 44
  84:	3d b5       	in	r19, 0x2d	; 45
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	28 17       	cp	r18, r24
  8a:	39 07       	cpc	r19, r25
  8c:	10 f4       	brcc	.+4      	; 0x92 <__vector_13+0x24>
  8e:	1d bc       	out	0x2d, r1	; 45
  90:	1c bc       	out	0x2c, r1	; 44
  92:	9f 91       	pop	r25
  94:	8f 91       	pop	r24
  96:	3f 91       	pop	r19
  98:	2f 91       	pop	r18
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <_Z7initMcuv>:
  a4:	8f e0       	ldi	r24, 0x0F	; 15
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	80 e3       	ldi	r24, 0x30	; 48
  aa:	8b bb       	out	0x1b, r24	; 27
  ac:	de 9a       	sbi	0x1b, 6	; 27
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	83 60       	ori	r24, 0x03	; 3
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	0f 9a       	sbi	0x01, 7	; 1
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	87 b9       	out	0x07, r24	; 7
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	87 b9       	out	0x07, r24	; 7
  c2:	87 b1       	in	r24, 0x07	; 7
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	87 b9       	out	0x07, r24	; 7
  c8:	35 98       	cbi	0x06, 5	; 6
  ca:	33 98       	cbi	0x06, 3	; 6
  cc:	30 98       	cbi	0x06, 0	; 6
  ce:	31 9a       	sbi	0x06, 1	; 6
  d0:	32 9a       	sbi	0x06, 2	; 6
  d2:	1c 9a       	sbi	0x03, 4	; 3
  d4:	83 b1       	in	r24, 0x03	; 3
  d6:	83 b9       	out	0x03, r24	; 3
  d8:	83 b1       	in	r24, 0x03	; 3
  da:	83 b9       	out	0x03, r24	; 3
  dc:	83 b1       	in	r24, 0x03	; 3
  de:	83 b9       	out	0x03, r24	; 3
  e0:	37 9a       	sbi	0x06, 7	; 6
  e2:	33 9a       	sbi	0x06, 3	; 6
  e4:	35 9a       	sbi	0x06, 5	; 6
  e6:	18 9a       	sbi	0x03, 0	; 3
  e8:	1a 9a       	sbi	0x03, 2	; 3
  ea:	36 9a       	sbi	0x06, 6	; 6
  ec:	8e b5       	in	r24, 0x2e	; 46
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	8e bd       	out	0x2e, r24	; 46
  f2:	8f b5       	in	r24, 0x2f	; 47
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	8f bd       	out	0x2f, r24	; 47
  f8:	8f b5       	in	r24, 0x2f	; 47
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	8f bd       	out	0x2f, r24	; 47
  fe:	8e b5       	in	r24, 0x2e	; 46
 100:	88 60       	ori	r24, 0x08	; 8
 102:	8e bd       	out	0x2e, r24	; 46
 104:	8e b5       	in	r24, 0x2e	; 46
 106:	80 61       	ori	r24, 0x10	; 16
 108:	8e bd       	out	0x2e, r24	; 46
 10a:	65 9a       	sbi	0x0c, 5	; 12
 10c:	61 9a       	sbi	0x0c, 1	; 12
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	9b bd       	out	0x2b, r25	; 43
 114:	8a bd       	out	0x2a, r24	; 42
 116:	82 b3       	in	r24, 0x12	; 18
 118:	88 64       	ori	r24, 0x48	; 72
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	8f b7       	in	r24, 0x3f	; 63
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	8f bf       	out	0x3f, r24	; 63
 122:	1d bc       	out	0x2d, r1	; 45
 124:	1c bc       	out	0x2c, r1	; 44
 126:	08 95       	ret

00000128 <main>:
 128:	bd df       	rcall	.-134    	; 0xa4 <_Z7initMcuv>
 12a:	8c b5       	in	r24, 0x2c	; 44
 12c:	9d b5       	in	r25, 0x2d	; 45
 12e:	8a b5       	in	r24, 0x2a	; 42
 130:	9b b5       	in	r25, 0x2b	; 43
 132:	fb cf       	rjmp	.-10     	; 0x12a <main+0x2>

00000134 <_Z9rgbwClearv>:
}
void rgbwClear(){
	PORTA = PORTA & 0xF0; //clear all LED related bits
 134:	8b b3       	in	r24, 0x1b	; 27
 136:	80 7f       	andi	r24, 0xF0	; 240
 138:	8b bb       	out	0x1b, r24	; 27
 13a:	08 95       	ret

0000013c <_Z9rgbwWritebbbb>:

uint8_t getDigitalInputs(){
	return PINA & DIGITAL_SW_MASK; //mask only the digital input pins to read them specifically. will not need once interrupts are finished
}

void rgbwWrite(bool red, bool green, bool blue, bool white){ 
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	08 2f       	mov	r16, r24
 146:	d6 2f       	mov	r29, r22
 148:	14 2f       	mov	r17, r20
 14a:	c2 2f       	mov	r28, r18
	//PORTA - PORTA7 PORTA6 PORTA5 PORTA4 PORTA3 PORTA2 PORTA1 PORTA0

	rgbwClear();			 //clear PORTA register before writing new values
 14c:	f3 df       	rcall	.-26     	; 0x134 <_Z9rgbwClearv>
	PORTA |= red<<PORTA0;    //write red value into output register
 14e:	8b b3       	in	r24, 0x1b	; 27
 150:	80 2b       	or	r24, r16
 152:	8b bb       	out	0x1b, r24	; 27
	PORTA |= blue<<PORTA1;  //write blue value into output register
 154:	8b b3       	in	r24, 0x1b	; 27
 156:	41 2f       	mov	r20, r17
 158:	44 0f       	add	r20, r20
 15a:	48 2b       	or	r20, r24
 15c:	4b bb       	out	0x1b, r20	; 27
	PORTA |= green <<PORTA2;   //write green value into output register
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	6d 2f       	mov	r22, r29
 162:	66 0f       	add	r22, r22
 164:	66 0f       	add	r22, r22
 166:	68 2b       	or	r22, r24
 168:	6b bb       	out	0x1b, r22	; 27
	PORTA |= white<<PORTA3;  //write white value into output register
 16a:	8b b3       	in	r24, 0x1b	; 27
 16c:	2c 2f       	mov	r18, r28
 16e:	22 0f       	add	r18, r18
 170:	22 0f       	add	r18, r18
 172:	22 0f       	add	r18, r18
 174:	28 2b       	or	r18, r24
 176:	2b bb       	out	0x1b, r18	; 27
	
	/*PORTA |= red<<PORTA0;    //write red value into output register
	PORTA |= green<<PORTA1;  //write blue value into output register
	PORTA |= blue<<PORTA2;   //write green value into output register
	PORTA |= white<<PORTA3;  //write white value into output register*/
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <__vector_6>:
uint32_t const ledPluseSpeed[] = {1,10,30,100,200}; // ms
uint8_t ledIntensityMask[4] = {255,255,255,255}; //rgbw softPWM mask
volatile uint16_t brightness;


ISR(TIM1_COMPA_vect){ //timer1A interrupt
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	2f 93       	push	r18
 18e:	3f 93       	push	r19
 190:	4f 93       	push	r20
 192:	5f 93       	push	r21
 194:	6f 93       	push	r22
 196:	7f 93       	push	r23
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
	if(PORTA & 1<<PINA0){
 1a4:	d8 9b       	sbis	0x1b, 0	; 27
 1a6:	0a c0       	rjmp	.+20     	; 0x1bc <__vector_6+0x3a>
		rgbwWrite(0,0,0,0); // turn LEDs on
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	c5 df       	rcall	.-118    	; 0x13c <_Z9rgbwWritebbbb>
		OCR1A = 0xFF;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	9b bd       	out	0x2b, r25	; 43
 1b8:	8a bd       	out	0x2a, r24	; 42
 1ba:	09 c0       	rjmp	.+18     	; 0x1ce <__vector_6+0x4c>
	}
	else{
		rgbwWrite(1,1,1,1); // turn LEDs on
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	bb df       	rcall	.-138    	; 0x13c <_Z9rgbwWritebbbb>
		OCR1A = 0xFFF;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	9f e0       	ldi	r25, 0x0F	; 15
 1ca:	9b bd       	out	0x2b, r25	; 43
 1cc:	8a bd       	out	0x2a, r24	; 42
	}

}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
